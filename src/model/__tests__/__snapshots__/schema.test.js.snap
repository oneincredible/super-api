// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Schema generation bike generates expected schema 1`] = `
"CREATE TABLE \\"bike_revision\\" (
  id uuid NOT NULL,
  revision BIGSERIAL,
  \\"price_id\\" uuid REFERENCES \\"price\\" (id),
  \\"brand\\" text,
  \\"wheel_size\\" integer,
  \\"delivery_date\\" timestamptz,
  UNIQUE(id, revision)
);"
`;

exports[`Schema generation bike generates expected schema 2`] = `
"CREATE TABLE \\"bike\\" (
  id uuid NOT NULL,
  revision BIGINT NOT NULL,
  PRIMARY KEY (id),
  FOREIGN KEY (id, revision) REFERENCES \\"bike_revision\\" (id, revision)
);"
`;

exports[`Schema generation bike generates expected schema 3`] = `
"CREATE TABLE \\"bike_wheels\\" (
  bike_id uuid NOT NULL REFERENCES \\"bike\\" (id),
  wheel_id uuid NOT NULL REFERENCES \\"wheel\\" (id),
  PRIMARY KEY (bike_id, wheel_id)
);"
`;

exports[`Schema generation bike_owner generates expected schema 1`] = `
"CREATE TABLE \\"bike_owner_revision\\" (
  id uuid NOT NULL,
  revision BIGSERIAL,
  \\"user_id\\" uuid REFERENCES \\"user\\" (id),
  \\"bike_id\\" uuid REFERENCES \\"bike\\" (id),
  UNIQUE(id, revision)
);"
`;

exports[`Schema generation bike_owner generates expected schema 2`] = `
"CREATE TABLE \\"bike_owner\\" (
  id uuid NOT NULL,
  revision BIGINT NOT NULL,
  PRIMARY KEY (id),
  FOREIGN KEY (id, revision) REFERENCES \\"bike_owner_revision\\" (id, revision)
);"
`;

exports[`Schema generation password generates expected schema 1`] = `
"CREATE TABLE \\"password_revision\\" (
  id uuid NOT NULL,
  revision BIGSERIAL,
  \\"date\\" timestamptz,
  \\"hash\\" text,
  UNIQUE(id, revision)
);"
`;

exports[`Schema generation password generates expected schema 2`] = `
"CREATE TABLE \\"password\\" (
  id uuid NOT NULL,
  revision BIGINT NOT NULL,
  PRIMARY KEY (id),
  FOREIGN KEY (id, revision) REFERENCES \\"password_revision\\" (id, revision)
);"
`;

exports[`Schema generation price generates expected schema 1`] = `
"CREATE TABLE \\"price_revision\\" (
  id uuid NOT NULL,
  revision BIGSERIAL,
  \\"amount\\" float,
  \\"currency\\" text,
  UNIQUE(id, revision)
);"
`;

exports[`Schema generation price generates expected schema 2`] = `
"CREATE TABLE \\"price\\" (
  id uuid NOT NULL,
  revision BIGINT NOT NULL,
  PRIMARY KEY (id),
  FOREIGN KEY (id, revision) REFERENCES \\"price_revision\\" (id, revision)
);"
`;

exports[`Schema generation session generates expected schema 1`] = `
"CREATE TABLE \\"session_revision\\" (
  id uuid NOT NULL,
  revision BIGSERIAL,
  \\"user_id\\" uuid REFERENCES \\"user\\" (id),
  \\"token\\" text,
  UNIQUE(id, revision)
);"
`;

exports[`Schema generation session generates expected schema 2`] = `
"CREATE TABLE \\"session\\" (
  id uuid NOT NULL,
  revision BIGINT NOT NULL,
  PRIMARY KEY (id),
  FOREIGN KEY (id, revision) REFERENCES \\"session_revision\\" (id, revision)
);"
`;

exports[`Schema generation user generates expected schema 1`] = `
"CREATE TABLE \\"user_revision\\" (
  id uuid NOT NULL,
  revision BIGSERIAL,
  \\"password_id\\" uuid REFERENCES \\"password\\" (id),
  \\"name\\" text,
  UNIQUE(id, revision)
);"
`;

exports[`Schema generation user generates expected schema 2`] = `
"CREATE TABLE \\"user\\" (
  id uuid NOT NULL,
  revision BIGINT NOT NULL,
  PRIMARY KEY (id),
  FOREIGN KEY (id, revision) REFERENCES \\"user_revision\\" (id, revision)
);"
`;

exports[`Schema generation wheel generates expected schema 1`] = `
"CREATE TABLE \\"wheel_revision\\" (
  id uuid NOT NULL,
  revision BIGSERIAL,
  \\"size\\" float,
  \\"thickness\\" float,
  UNIQUE(id, revision)
);"
`;

exports[`Schema generation wheel generates expected schema 2`] = `
"CREATE TABLE \\"wheel\\" (
  id uuid NOT NULL,
  revision BIGINT NOT NULL,
  PRIMARY KEY (id),
  FOREIGN KEY (id, revision) REFERENCES \\"wheel_revision\\" (id, revision)
);"
`;
